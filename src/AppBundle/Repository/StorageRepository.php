<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Gedmo\Tool\Wrapper\EntityWrapper;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use http\Exception\InvalidArgumentException;

/**
 * StockageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StorageRepository extends NestedTreeRepository
{

    public function findAllByUser(User $user, array $orders)
    {
        $qb = $this->createQueryBuilder("s")
            ->where("s.user = :user")
            ->setParameter("user", $user);

        foreach ($orders as $sort => $order ){
            $qb->addOrderBy($sort, $order);
        }

        return $qb->getQuery()
            ->getResult()
            ;
    }

    /**
     * Get the Tree path of Nodes by given $node
     *
     * @param object $node
     *
     * @return array - list of Nodes in path
     */
    public function getPathByUser($node, User $user)
    {
        return $this->getPathQueryByUser($node, $user)->getQuery()->getResult();
            //->getResult();
    }

    /**
     * Get the Tree path query builder by given $node
     *
     * @param object $node
     *
     * @throws InvalidArgumentException - if input is not valid
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getPathQueryByUser($node, User $user)
    {
        $meta = $this->getClassMetadata();
        if (!$node instanceof $meta->name) {
            throw new InvalidArgumentException("Node is not related to this repository");
        }
        $config = $this->listener->getConfiguration($this->_em, $meta->name);
        $wrapped = new EntityWrapper($node, $this->_em);
        if (!$wrapped->hasValidIdentifier()) {
            throw new InvalidArgumentException("Node is not managed by UnitOfWork");
        }
        $left = $wrapped->getPropertyValue($config['left']);
        $right = $wrapped->getPropertyValue($config['right']);
        $qb = $this->getQueryBuilder();
        $qb->select('node')
            ->from($config['useObjectClass'], 'node')
            ->where($qb->expr()->lte('node.'.$config['left'], $left))
            ->andWhere($qb->expr()->gte('node.'.$config['right'], $right))
            ->orderBy('node.'.$config['left'], 'ASC')
        ;
        if (isset($config['root'])) {
            $rootId = $wrapped->getPropertyValue($config['root']);
            $qb->andWhere($qb->expr()->eq('node.'.$config['root'], ':rid'));
            $qb->setParameter('rid', $rootId);
        }

        $qb->andWhere($qb->expr()->eq("node.user",":userid"));
        $qb->setParameter('userid', $user->getId());

        return $qb;
    }
}
